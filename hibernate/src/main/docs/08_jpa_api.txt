Java Persistence API (JPA)

-   Configure a JPA configuration (persistence.xml)
-   Discover JPA interfaces
-   Learn to invoke persistence manager methods taht manage crud operations and transactions
-   Understand thd similarities between Session and EntityManager

EntityManager vs Session

            Entity Manager              Session
---------------------------------------------------------
 persist()                      save()
 merge()                        merge()
 remove()                       delete()
 detach(), close(), clear()     evict(), close(), clear()
 find(), getReference()         get(), load()
 flush()                        flush()
 ---------------------------------------------------------

Important Lesson Notes

-   Hibernate is our JPA implementation. JPA is a subset of Hibernate. Hibernate is our underlying JPA implementation.
-   Persistence Lifecycle
-   Application Managed/Resource Local Transactions.
    -   Application Managed Entity Manager
        -  We are responsible for creating and destroying the entity manager
    -   Container Managed Entity Manager
        -   We would be working in a Java EE environment so there would be an application server. We are not talking
            Tomcat but JBoss or Oracle's WebLogic.  That would allow us to inject our entity manager via dependency
            injection. It would also perform our transaction management so we could declaratively manage transactions.
-   run populate.sql before each lesson.

JPA Configuration
- Must add hibernate-entitymanager to the POM.XML:

  	<dependency>
  		<groupId>org.hibernate</groupId>
  		<artifactId>hibernate-entitymanager</artifactId>
  		<version>4.3.10.Final</version>
  	</dependency>
-   Make sure the version is the latest by checking the Maven repository:
    http://mvnrepository.com/artifact/org.hibernate/hibernate-entitymanager
-   Create a persistence.xml file and place it in a folder called META-INF. This folder must reside at the base of the
    classpath.