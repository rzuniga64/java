Basic Mapping Annotations
    -   Learn the most common mapping annotations.
    -   Understand value types in Hibernate.
        Types in Hibernate are the fields withing our persistence classes.
    -   Discern between JPA and Hibernate annotations.

    JPA (Interface)             / Hibernate (Implementation)

    public interface Dog {      public class Boxer  implements Dog {
        public void bark();         public void bark() {
        }                               System.out.println("Bark!");
    }                               }
                                }

An interface means we'll have this type that doesn't exist as an implementation but this type will follow a certain
standard. The Boxer class honors the contract specified in the Dog interface.  So we can use these types
interchangeably.

JPA is a specification that defines a whole set of annotations. We need to define implementations for all these
interfaces that a JPA compliant implementation works with.  JPA provides the contract and Hibernate provides the
implementation of JPA.

Hibernate annotations vs JPA annotations
    JPA annotations
-   JPA annotations are defined by JPA 2.0 Specification (JSR 317)
-   Provides the standard API on which ORM vendors should base their implementation.
-   Packaged in javax.persistence.

    Hibernate annotations
-   Provides features beyond those specified in JPA.
-   Couples the application to Hibernate.
-   Packaged in org.hibernate.annotations.

Hibernate Types
    Hibernate will look at each data type for each entity and when it persists to the database it needs to know how to
    convert these Java data types to the appropriate type in the underlying database table. Hibernate has its own
    internal types that provide that translation. But Hibernate does not have a type to map a Entity or a collection
    to a database table. We need to provide more information to Hibernate for those more complex types.  These will
    fall into different categories. Depending on the category its going to determine how to map that fields type using
    Hibernate or JPA annotation.

-   Entity Types have a database identity.
    Corresponds with a database row. In Java our entities will have an @Id and
    @Entity. That because they correspond with that database row and have their own identity. They also have their own
    lifecycle. So when we are working with the persistence provide the entities will fall into different states.

-   Value types
    -   No database identity. (Does nt contain @Id)
    -   Doesn't have its own  lifecycle or unique id that identifies it.We write a value type to that column when
        we persist the Entity.
    -   Embedded within an entity.

    -   Basic: Map a single database value(column) to a single, non-aggregated Java type
        -   integer, long short float double, character, byte, boolean
            yes_no, true_false, string, date, time, timestamp, calendar,
            calendar_date, big_decimal, big_integer, locale, timezone,
            currency, class, binary, text, image, clob, blob
    -   Composite Types
    -   Collection