Hibernate API: 3 major pillars that make up a Hibernate application
1.  Hibernate configuration
2.  Mapping metadata on the entities
3.  Invoking persistence operations

-   Learn to invoke persistence manager methods that manage CRUD operations and transactions.  Within Hibernate the
    main interface that we will be looking at is the Session interface which will allow us to perform those database
    operations and manage the persistence lifecycle.
-   Understand the persistence lifecycle or the different states our entities transition into and out of.
-   Become familiar with interfaces in the Hibernate API.

Important Lesson Notes
-   Hibernate Session vs JPA EntityManager
-   populate.sql will truncate all of the tables so all the records will be lost. It will then insert a few records
    into the Bank table that we can work against.

Persistence Lifecycle
Depending on where the sit within that lifecycle will determine if we can sync their state with the database.

Lifecycles
-   States money can be in: earned, saved, available, spent
-   Actions is how money gets into those states. An action is invoked: deposit, withdrawal, purchase
-   Objects are the things we perform actions on

                                Account:object
                                ____________
               deposit():action |           |  withdrawal():action
       $ earned: -------------> |  Saved:   | -------------------->   Available:state
         object                 |  state    |
                                -------------
                                    |
                             purchase():action
                                    |
                                    V
                               Spent: state

Hibernate Lifecycle
                                Persistence Context
                                ---------------------
        Transient:  ----------> |   Persistent &    | ------------> Detached:
        state                   |   Removed: states |               state
                                ---------------------

Entity States
-   Transient: object constructed with the new operation that is not associated with any database row.
-   Persistent: an entity instance associated with a database row and contianed within a persistence context.
-   Removed: an object scheduled for deletion
-   Detached: object references to an entity once associated with a closed persistence context.

Persistence Context
-   Cache of all persistent entity instances. A persistence context is usually created with a Session. Invoke Hibernate
    operations on our entities. Maybe we build an object with the new operator and constructor and then we invoke the
    save method on that object. At that point the object gets placed into the persistence context. Or we query for
    some objects from the database. Hibernate goes and fetches some rows from the database, changes them into objects
    and now those objects are stored within the persistence context.  If we makes changes to those object the
    persistence context will be aware of those changes and it is able to perform all these operations that synch
    our object model with the database model.
-   Corresponds with a session (Persistence Manager). Invoke operations on the session that will manipulate our
    persistence context and the entities stored within it.

    SessionFactory factory = HibernateUtil.getSessionFactory();
    Session session = factory.openSession();
    // perform operations on entities
    session.close();

Hibernate API actions

Initial State           Action          End State
--------------------------------------------------
None                    get()           Persistent
                        load
--------------------------------------------------
Transient               save()          Persistent
                        saveOrUpdate()
--------------------------------------------------
Persistent              delete()        Removed
--------------------------------------------------
Detached                update()        Persistent
                        saveOrUpdate()
--------------------------------------------------
Persistent              evict()         Detached
--------------------------------------------------

Example

Bank bank = new Bank(); //transient
// bank.setAllProperties();
SessionFactory factory = Hibernate.getSessionFactory();

Session session = factory.openSession(); // Persistence Context 1
Transaction transaction = session.beginTransaction();
session.save(bank); // persistent
transaction.commit();
session.close(); // Close Persistence Context 1

// bank is now detached
Session session2 = factory.openSession(); // Persistence Context 2
Transaction transaction2 = session2.beginTransaction();
session2.delete(bank); // removed (Hibernate only)
transaction2.commit();
session.close(); // Close Persistence Context 2





